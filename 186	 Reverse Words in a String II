Question:
Given an input string , reverse the string word by word. 

Example:

Input:  ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]
Note: 

A word is defined as a sequence of non-space characters.
The input string does not contain leading or trailing spaces.
The words are always separated by a single space.
Follow up: Could you do it in-place without allocating extra space?

Website:https://repl.it/languages/csharp

using System;
using System.Collections.Generic;
class MainClass {
  public static void Main (string[] args) {
    char[] words = new char[15]{'t','h','e',' ','s','k','y',' ','i','s',' ','b','l','u','e'};
    char[] res = new char[15];
    IList<int> indexes = new List<int>(){0};
    for(int i = 1;i<words.Length-1;i++)
    {
      if(words[i-1]==' ')indexes.Add(i);
      else if(words[i+1]==' ')indexes.Add(i);
    }
    indexes.Add(words.Length-1);
    int index = 0;
    int count = 0;
    for(int i = indexes.Count-2;i>-1;i-=2)
    {
      while(count <indexes[i+1]-indexes[i]+1)
      {
        res[index++] = words[indexes[i]+count];
        count++;
      }
      if(index<res.Length)res[index++]=' ';
      count = 0;
    }
    foreach(char c in res)Console.WriteLine(c);    
  }
  
}
