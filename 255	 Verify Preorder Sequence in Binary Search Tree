Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.
You may assume each number in the sequence is unique.
Consider the following binary search tree: 
     5
    / \
   2   6
  / \
 1   3
Example 1:
Input: [5,2,6,1,3]
Output: false
Example 2:
Input: [5,2,1,3,6]
Output: true
Follow up:
Could you do it using only constant space complexity?


Website:https://dotnetfiddle.net/

using System;
using System.Collections.Generic;
public class Program
{
	public static bool VerifyPreorder(int[] preorder)
	{
		int low = Int32.MinValue;
		Stack<int> stack = new Stack<int>();
		foreach(int i in preorder)
		{
			if(i<low)return false;
			while(stack.Count>0&&i>stack.Peek())low = stack.Pop();
			stack.Push(i);
		}
		return true;
	}
	public static void Main()
	{
		Console.WriteLine(VerifyPreorder(new int[]{5,2,6,1,3}));
		Console.WriteLine(VerifyPreorder(new int[]{5,2,1,3,6}));
	}
}
