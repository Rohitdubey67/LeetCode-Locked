There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.
The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.
Note:
All costs are positive integers.
Follow up:
Could you solve it in O(nk) runtime?
Understand the problem:
This is a classic back pack problem. 
 -- Define dp[n][k], where dp[i][j] means for house i with color j the minimum cost. 
 -- Initial value: dp[0][j] = costs[0][j]. For others, dp[i][j] = Integer.MAX_VALUE;, i >= 1
 -- Transit function: dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + cost[i][j]), where k != j.
 -- Final state: Min(dp[n - 1][k]).
 
 Website:https://dotnetfiddle.net/
 
using System;
using System.Linq;
public class Program
{
	public static int MinCostII(int[][] costs)
	{
		int length = costs.Length;
		if(length<1)return 0;
		int k = costs[0].Length;
		int[][] dp = new int[length][];
		dp[0] = new int[k];
		for(int i = 0;i<k;i++)dp[0][i] = costs[0][i];
		for(int i = 1;i < length;i++)
		{
			dp[i] = Enumerable.Repeat(Int32.MaxValue,k).ToArray();
			for(int j = 0;j<k;j++)
			{
				for(int l = 0;l<k;l++)
				{
					if(l!=j)dp[i][j] = Math.Min(dp[i-1][l] + costs[i][j],dp[i][j]);
				}
			}
		}
		int res = Int32.MaxValue;
		for(int i = 0;i<k;i++)
		{
			res = Math.Min(res,dp[length-1][i]);
		}
		return res;
	}
	public static void Main()
	{
		int[][] costs = new int[3][]{new int[3]{17,2,17},new int[3]{16,16,5},new int[3]{14,3,19}};
		Console.WriteLine(MinCostII(costs));
	}
}
 
