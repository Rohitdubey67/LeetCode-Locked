Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: kâ‰¤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?

Website:https://dotnetfiddle.net/

using System;
using System.Collections.Generic;
public class Program
{
	public class TreeNode{
		public int val;
		public TreeNode left;
		public TreeNode right;
		public TreeNode(int x){ val = x;}
	}
	public static void Main()
	{
		TreeNode root = new TreeNode(4);
		root.left = new TreeNode(2);
		root.right = new TreeNode(5);
		root.left.left = new TreeNode(1);
		root.left.right = new TreeNode(3);
		IList<int> res = ClosestKValues(root,3.714286,2);
		foreach(int i in res)Console.WriteLine(i);
	}
	public static IList<int> ClosestKValues(TreeNode root, double target, int k) {
        Queue<int> res = new Queue<int>();

        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode node = root;
        while(stack.Count>0 || node != null){
            while(node != null){
                stack.Push(node);
                node = node.left;
            }

            node = stack.Pop();

            if(res.Count < k){
                res.Enqueue(node.val);
            }else{
                if(Math.Abs(res.Peek() - target) > Math.Abs(node.val - target)){
                    res.Dequeue();
                    res.Enqueue(node.val);
                }else{
                    break;
                }
            }

            node = node.right;
        }

        return new List<int>(res) ;
    }
}
