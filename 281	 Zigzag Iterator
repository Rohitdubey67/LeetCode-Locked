Given two 1d vectors, implement an iterator to return their elements alternately.

Example:

Input:
v1 = [1,2]
v2 = [3,4,5,6] 

Output: [1,3,2,4,5,6]

Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,3,2,4,5,6].
Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example:

Input:
[1,2,3]
[4,5,6,7]
[8,9]

Output: [1,4,8,2,5,9,3,6,7]

Website:https://dotnetfiddle.net/

using System;
using System.Collections.Generic;				
public class Program
{
	public static void Main()
	{
		IList<IList<int>> lists = new List<IList<int>>();
		lists.Add(new List<int>(){1,2,3});
		lists.Add(new List<int>(){4,5,6,7});
		lists.Add(new List<int>(){8,9});
		ZigzagIterator z = new ZigzagIterator(lists);
		while(z.HasNext())Console.WriteLine(z.Next());
	}
	public class ZigzagIterator {

    public Queue<Queue<int>> queue;
    public ZigzagIterator(IList<IList<int>> lists) {
        queue = new Queue<Queue<int>>();
        foreach(IList<int> list in lists)queue.Enqueue(new Queue<int>(list));
    }

    public int Next() {
        if(HasNext()){
			Queue<int> q = queue.Dequeue();
			int val = q.Dequeue();
			if(q.Count>0)queue.Enqueue(q);
			return val;
		}
		return -1;
    }

    public bool HasNext() {
        return queue.Count>0;
    }
}

}
