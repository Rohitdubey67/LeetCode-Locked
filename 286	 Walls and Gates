You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example:

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
1
2
3
4
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
Website:https://dotnetfiddle.net/
  
using System;
using System.Collections.Generic;
public class Program
{
	public static void WallsAndGates(int[][] rooms) 
	{
		if(rooms.Length<1||rooms[0].Length<1)return;
		int rows = rooms.Length, cols = rooms[0].Length;
		Queue<int[]> queue = new Queue<int[]>();
		for(int i = 0;i<rows;i++)
		{
			for(int j = 0;j<cols;j++)
			{
				if(rooms[i][j] == 0)queue.Enqueue(new int[2]{i,j});	
			}
		}
		while(queue.Count>0)
		{
			int[] pos = queue.Dequeue();
			if(pos[0]>0 && rooms[pos[0]-1][pos[1]] == Int32.MaxValue)
			{
				rooms[pos[0]-1][pos[1]] = rooms[pos[0]][pos[1]]+1;
				queue.Enqueue(new int[2]{pos[0]-1,pos[1]});
			}
			if(pos[1]>0 && rooms[pos[0]][pos[1]-1] == Int32.MaxValue)
			{
				rooms[pos[0]][pos[1]-1] = rooms[pos[0]][pos[1]]+1;
				queue.Enqueue(new int[2]{pos[0],pos[1]-1});
			}
			if(pos[0]<rows-1 && rooms[pos[0]+1][pos[1]] == Int32.MaxValue)
			{
				rooms[pos[0]+1][pos[1]] = rooms[pos[0]][pos[1]]+1;
				queue.Enqueue(new int[2]{pos[0]+1,pos[1]});
			}
			if(pos[1]<cols-1 && rooms[pos[0]][pos[1]+1] == Int32.MaxValue)
			{
				rooms[pos[0]][pos[1]+1] = rooms[pos[0]][pos[1]]+1;
				queue.Enqueue(new int[2]{pos[0],pos[1]+1});
			}
		}
	}
	public static void Main()
	{
		int[][] rooms = new int[4][]{new int[4]{Int32.MaxValue,-1,0,Int32.MaxValue},new int[4]{Int32.MaxValue,Int32.MaxValue,Int32.MaxValue,-1},new int[4]{Int32.MaxValue,-1,Int32.MaxValue,-1},new int[4]{0,-1,Int32.MaxValue,Int32.MaxValue}};
		WallsAndGates(rooms);
		foreach(int[] interval in rooms)
			foreach(int i in interval)
				Console.WriteLine(i);
	}
}
