A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:

Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: Given three people living at (0,0), (0,4), and (2,2):
             The point (0,2) is an ideal meeting point, as the total travel distance 
             of 2+2+2=6 is minimal. So return 6.
Hint:

Try to solve it in one dimension first. How can this solution apply to the two dimension case?

using System;
using System.Collections.Generic;	
using System.Linq;
public class Program
{
	public static int MinTotalDistance(int[,] grid){
		List<int> horizontal = new List<int>(),vertical = new List<int>();
		int rows = grid.GetLength(0),columns = grid.GetLength(1);
		for(int i = 0;i<rows;i++)
		{
			for(int j = 0;j<columns;j++)
			{
				if(grid[i,j] == 1)
				{
					horizontal.Add(i);
					vertical.Add(j);
				}
			}
		}
		horizontal.Sort();
		vertical.Sort();
		int count = horizontal.Count,res = 0;
		int midx = horizontal[count/2],midy = vertical[count/2];
		foreach(int i in horizontal)res+=Math.Abs(i-midx);
		foreach(int j in vertical)res+=Math.Abs(j-midy);
		return res;
	}
	public static void Main()
	{
		int[,] grid = new int[3,5]
		{{1, 0, 1, 0, 1},  
         {0, 1, 0, 0, 0}, 
         {0, 1, 1, 0, 0}}; 
		Console.WriteLine(MinTotalDistance(grid));
	}
}

