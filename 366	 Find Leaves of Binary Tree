Question:
Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

 

Example:

Input: [1,2,3,4,5]
  
          1
         / \
        2   3
       / \     
      4   5    

Output: [[4,5,3],[2],[1]]
 

Explanation:

1. Removing the leaves [4,5,3] would result in this tree:

          1
         / 
        2          
 

2. Now removing the leaf [2] would result in this tree:

          1          
 

3. Now removing the leaf [1] would result in the empty tree:

          []         
          

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
Website:https://repl.it/languages/csharp

using System;
using System.Collections.Generic;

class MainClass {
  public class TreeNode{
    public int val;
    public TreeNode left;
    public TreeNode right;
    public TreeNode(int x)
    {
      val = x;
    }
  }
  public static void Main (string[] args) {
    TreeNode treeNode = new TreeNode(1);
    treeNode.left = new TreeNode(2);
    treeNode.right = new TreeNode(3);
    treeNode.left.left = new TreeNode(4);
    treeNode.left.right = new TreeNode(5);
    IList<IList<int>> res = new List<IList<int>>();
    Levels(treeNode,res);
    Console.WriteLine (res[0][2]);
  }
  public static int Levels(TreeNode treeNode,IList<IList<int>> res)
  {
    if(treeNode == null) return -1;
    int left = Levels(treeNode.left,res);
    int right = Levels(treeNode.right,res);
    int level = Math.Max(left,right)+1;
    if(res.Count<level+1)
    {
      res.Add(new List<int>());
    }
    res[level].Add(treeNode.val);
    return level;
  }
}
