Design and implement a data structure for a compressed string iterator. It should support the following operations: next and hasNext.

The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.

next() - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space.
hasNext() - Judge whether there is any letter needs to be uncompressed.

Note:
Please remember to RESET your class variables declared in StringIterator, as static/class variables are persisted across multiple test cases. Please see here for more details.

Example:

StringIterator iterator = new StringIterator("L1e2t1C1o1d1e1");

iterator.next(); // return 'L'
iterator.next(); // return 'e'
iterator.next(); // return 'e'
iterator.next(); // return 't'
iterator.next(); // return 'C'
iterator.next(); // return 'o'
iterator.next(); // return 'd'
iterator.hasNext(); // return true
iterator.next(); // return 'e'
iterator.hasNext(); // return false
iterator.next(); // return ' '

Website:https://dotnetfiddle.net/

using System;
using System.Text;					
public class Program
{
	public class StringIterator{
		StringBuilder sb = new StringBuilder();
		int curr = 0;
		public StringIterator(string s){
			int i = 0;
			while(i<s.Length)
			{
				char c = s[i++];
				int num = 0;
				while(i<s.Length&&char.IsDigit(s[i]))
				{
					num = num*10 + s[i++] - '0';
				}
				for(int j = 0;j<num;j++)
					sb.Append(c);
			}
		}
		public char Next()
		{
			if(!HasNext())
				return ' ';
			return sb[curr++];
		}
		public bool HasNext()
		{
			return curr<sb.Length;
		}
	}
	
	public static void Main()
	{
		StringIterator iterator = new StringIterator("L1e2t1C1o1d1e1");

		Console.WriteLine(iterator.Next()); // return 'L'
		Console.WriteLine(iterator.Next()); // return 'e'
		Console.WriteLine(iterator.Next()); // return 'e'
		Console.WriteLine(iterator.Next()); // return 't'
		Console.WriteLine(iterator.Next()); // return 'C'
		Console.WriteLine(iterator.Next()); // return 'o'
		Console.WriteLine(iterator.Next()); // return 'd'
		Console.WriteLine(iterator.HasNext()); ; // return true
		Console.WriteLine(iterator.Next()); // return 'e'
		Console.WriteLine(iterator.HasNext()); ; // return false
		Console.WriteLine(iterator.Next()); // return ' '
	}
}
